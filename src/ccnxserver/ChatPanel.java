/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ccnxserver;

import gson.util.GsonMessageBuilder;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.ccnx.ccn.protocol.MalformedContentNameStringException;
import org.pl.lecznica.Wynik;
import org.pl.lecznica.util.Messager;

import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import org.ccnx.ccn.config.ConfigurationException;
import org.pl.lecznica.messages.GetMessage;
import org.pl.lecznica.messages.HealthInfoMessage;
import org.pl.lecznica.messages.Message;
import org.pl.lecznica.messages.MessageBody;
import org.pl.lecznica.messages.MessageFactory;
import org.pl.lecznica.messages.StringMessage;


/**
 *
 * @author Wojtek
 */
public class ChatPanel extends javax.swing.JPanel  implements ActionListener, ListSelectionListener, PropertyChangeListener {

    private final String namespace;
    private final String name;
    public static Messager messager;
    private DefaultTableModel model;
//    private CCNClientFrame parent;
    protected CCNClientChat chat;
    private ChatPanel instance;
    
    /**
     * Creates new form ChatPanel
     */
    public ChatPanel(CCNClientChat _chat, String _namespace, String _name){
        
        namespace = _namespace;
        name = _name;
        chat = _chat;
        
        initComponents();
        errorLabel.setText("");

        _messagePane.setEditable(false);
        _messagePane.setBackground(Color.LIGHT_GRAY);
        _messagePane.setLineWrap(true);
        _typedText.addActionListener(this);
        addPropertyChangeListener(this);
        
        messager = new Messager();
        List<Wynik> wyniki = new ArrayList<Wynik>();
        model = (DefaultTableModel) jTable1.getModel();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel selekcja = jTable1.getSelectionModel();
        selekcja.addListSelectionListener((ListSelectionListener) this);
        
        reloadTable(wyniki);
        
        _typedText.requestFocusInWindow();
        instance = this;
        nameLabel.setText(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tempTextField = new javax.swing.JTextField();
        pressureTextField = new javax.swing.JTextField();
        sugarTextField = new javax.swing.JTextField();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateEditor = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        _messagePane = new javax.swing.JTextArea();
        _typedText = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(210, 120));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Namespace :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 2, 2);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Key :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText(namespace);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 2, 2);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("XXXXXXXXXXXXXXXX");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel1.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel1.add(nameLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Health Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Body temperature :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 2, 2);
        jPanel2.add(jLabel6, gridBagConstraints);

        jLabel7.setText(" Blood pressure :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(jLabel7, gridBagConstraints);

        jLabel8.setText(" Blood sugar :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Test date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(jLabel9, gridBagConstraints);

        tempTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        tempTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 2, 2);
        jPanel2.add(tempTextField, gridBagConstraints);

        pressureTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        pressureTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(pressureTextField, gridBagConstraints);

        sugarTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        sugarTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(sugarTextField, gridBagConstraints);

        dateEditor.setFormats("yyyy/MM/dd");
        dateEditor.setDate(dateEditor.getLinkDay());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        jPanel2.add(dateEditor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel2, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 140));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 140));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "test date", "body temperature", "blood pressure", "blood sugar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(106, 66));

        _messagePane.setColumns(20);
        _messagePane.setRows(5);
        jScrollPane2.setViewportView(_messagePane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jScrollPane2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(_typedText, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manage", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Connect");
        jButton1.setMinimumSize(new java.awt.Dimension(100, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(100, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 2, 10);
        jPanel4.add(jButton1, gridBagConstraints);

        jButton2.setText("Send");
        jButton2.setEnabled(false);
        jButton2.setMinimumSize(new java.awt.Dimension(100, 23));
        jButton2.setPreferredSize(new java.awt.Dimension(100, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 10);
        jPanel4.add(jButton2, gridBagConstraints);

        jButton3.setText("Get");
        jButton3.setEnabled(false);
        jButton3.setMinimumSize(new java.awt.Dimension(100, 23));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 10);
        jPanel4.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(jPanel4, gridBagConstraints);

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText("*error text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(errorLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void enableButtons(boolean enable){
        jButton2.setEnabled(enable);
        jButton3.setEnabled(enable);        
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if(chat!=null)
                sendMessage();
            else {
                errorLabel.setText("*'Not connected!");
            }
              
        } catch (IOException ex) {
            errorLabel.setText(ex.getMessage());
            Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        Date date = new Date(Calendar.getInstance().getTimeInMillis());
        String message = messager.getGetMessage(name, date);
        try {
            chat.sendMessage(message);
        } catch (IOException ex) {
            errorLabel.setText(ex.getMessage());
            Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                   

                try { 
                startChat();
                 } catch (MalformedContentNameStringException ex) {
                    errorLabel.setText(ex.getMessage());
                    Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    errorLabel.setText(ex.getMessage());
                    Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ConfigurationException ex) {
                    errorLabel.setText(ex.getMessage());
                    Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
                }  
            
  
            

        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea _messagePane;
    private javax.swing.JTextField _typedText;
    private org.jdesktop.swingx.JXDatePicker dateEditor;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField pressureTextField;
    private javax.swing.JTextField sugarTextField;
    private javax.swing.JTextField tempTextField;
    // End of variables declaration//GEN-END:variables

    public void reloadTable(List<Wynik> wyniki){
        if (wyniki != null && wyniki.size() > 0) {
            model.setRowCount(0);
            int count = 1;
            for(Wynik wynik : wyniki){
            
                Object[] row = new Object[5];
                row[0] = count++;
                row[1] = wynik.getDataBadania().toString();
                row[2] = wynik.getTemperatura();
                row[3] = wynik.getCisnienie();
                row[4] = wynik.getPoziomCukru();

                model.addRow(row);
//                System.out.println(row);
            }
            jTable1.setModel(model);
        }
    }
    public void startChat() throws MalformedContentNameStringException, IOException, ConfigurationException{
        if(name != null) {                       

                    chat.setMode(CCNClientChat.Mode.MODE_START);


        } else {
            errorLabel.setText("*'Name' cannot be empty!");
        }
    }
    
    public void sendMessage() throws IOException{

        Wynik wynik = new Wynik();
        wynik.setCisnienie(pressureTextField.getText());
        wynik.setTemperatura(tempTextField.getText());
        wynik.setPoziomCukru(sugarTextField.getText());
        wynik.setDataBadania(new Date(dateEditor.getDate().getTime()));
        List<Wynik> wyniki = new ArrayList<Wynik>();
        wyniki.add(wynik);
        String message = messager.getHealthInfoMessage(name, wyniki);
        System.out.println(message);
        chat.sendMessage(message);
    }
    

    
    public String getChatText(){
        return _typedText.getText();
    }

     public void setChatText(String text){
        _typedText.setText(text);
        _typedText.requestFocusInWindow();
    }
    
    public void setRcvMessage(String message){
        _messagePane.insert(message, _messagePane.getText().length());
        _messagePane.setCaretPosition(_messagePane.getText().length());
        
        Message recMessage = messager.fromJson(message);
        String uzytkownik = null;
        if(recMessage != null) {
            uzytkownik = recMessage.getName();
            if(uzytkownik!=null && (name.equals(uzytkownik))) {

            MessageBody mb = recMessage.getMessageBody();
            if(StringMessage.class.equals(mb.getClass()))
                try {
                    processMessage((StringMessage)mb);
            } catch (IOException ex) {
                errorLabel.setText(ex.getMessage());
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            else if(GetMessage.class.equals(mb.getClass()))
                processMessage((GetMessage)mb);
            else if(HealthInfoMessage.class.equals(mb.getClass()))
                processMessage((HealthInfoMessage)mb);
            }
            else throw new IllegalArgumentException("Unknown user name: "+ uzytkownik);
        }
    }
    
    public void processMessage (StringMessage message) throws IOException{
        if(message != null){
            String result = message.getTextMessage();
            
            if((MessageFactory.READY_MESSAGE).equals(result)){
//                System.out.println("StringMessage: "+result);
                this.enableButtons(true);
                this.repaint();
            } else if((MessageFactory.CLOSE_MESSAGE).equals(result)){
                chat.stop();
            }  
        }
    }
    public void processMessage (GetMessage message){
        
    }
    public void processMessage (HealthInfoMessage message){
        List<Wynik> wyniki = message.getHealthInfo();
        if(wyniki != null && wyniki.size() > 0)
            reloadTable(wyniki);
    }
    @Override
    public void valueChanged(ListSelectionEvent e) {

    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        errorLabel.setText("");
//        System.out.println("PropChange:"+name);
    }

    /**
     * Process input to TextField after user hits enter.
     * (non-Javadoc)
     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent e) {
            try {
                    String newText = getChatText();
                    if ((null != newText) && (newText.length() > 0)) {
                            chat.sendMessage(newText);
                    }

            } catch (Exception e1) {
                    System.err.println("Exception saving our input: " + e1.getClass().getName() + ": " + e1.getMessage());
                    e1.printStackTrace();
            }
    setChatText("");

    }

}
